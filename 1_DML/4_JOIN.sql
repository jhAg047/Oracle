-- JOIN : 하나 이상의 테이블에서 데이터를 조회하기 위해 사용

-- 사번, 사원 명, 부서 코드, 부서 명 조회
SELECT EMP_ID,EMP_NAME,DEPT_CODE
FROM EMPLOYEE;

SELECT DEPT_ID,DEPT_TITLE
FROM DEPARTMENT;

-- 연결할 컬럼 이름이 다른 경우 
-- 오라클 구문
SELECT EMP_ID, EMP_NAME,DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE = DEPT_ID; -- 이너조인(내부조인)

-- ANSI 표준 구문
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE
FROM EMPLOYEE -- 노란줄 : 편집기 오류(구문오류는 아님~!)
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

-- 연결할 컬럼 이름이 같은 경우
-- ORACLE
SELECT EMP_ID,EMP_NAME,EMPLOYEE.JOB_CODE,JOB_NAME
FROM EMPLOYEE,JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

-- 별칭 사용
SELECT EMP_ID,EMP_NAME,E.JOB_CODE,JOB_NAME
FROM EMPLOYEE E,JOB J
WHERE E.JOB_CODE = J.JOB_CODE;

-- ANSI 
SELECT EMP_ID,EMP_NAME,JOB_CODE,JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE);
    
-- 부서 명과 해당 부서의 지역 명 조회(DEPT_TITLE,LOCAL_NAME)
-- ORACLE
SELECT DEPT_TITLE,LOCAL_NAME
FROM DEPARTMENT, LOCATION 
WHERE LOCATION_ID= LOCAL_CODE;
SELECT *
FROM DEPARTMENT;
SELECT *
FROM LOCATION;
-- ANSI
SELECT DEPT_TITLE,LOCAL_NAME
FROM DEPARTMENT
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE);

-- 외부 조인(OUTER JOIN)
-- 두 테이블의 지정하는 컬럼 값이 일치 하지 않는 행도 조인에 포함
-- LEFT [OUTER] JOIN : 왼족에 기술된 테이블의 컬럼 수를 기준으로 JOIN
-- ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    LEFT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID); -- EMPLOYEE가 기준
    
-- ORACLE : 맞춰주는 쪽에 (+)를 붙임
SELECT EMP_NAME, DEPT_TITLE
FROM EOMPLOYEE,DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+); -- '내가 너한테 맞춰줄게~' 라고 말하는 쪽이 (+)를 붙임

-- RIGHT [OUTER] JOIN : 오른쪽에 기술된 테이블의 컬럼수를 기준으로 조인
-- ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    RIGHT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);
    
-- ORACLE
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;

-- FULL [OUTER] JOIN : 합치기에 사용한 두 테이블이 가진 모든 행을 결과에 포함
-- ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    FULL JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);
-- ORACLE : 오라클은 불가능함!
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID(+); -- 에러,(+)는 한 쪽에만 사용 가능

-- 0207

-- CROSS JOIN
SELECT EMP_NAME
FROM EMPLOYEE; -- 23개 행

SELECT DEPT_TITLE
FROM DEPARTMENT; -- 9개 행

SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE
    CROSS JOIN DEPARTMENT;
    
-- 비등가 조인(NON EQUAL JOIN)
-- '='(등호)를 사용하지 않는 조인문
-- 지정한 컬럼 값이 일치하는 경우가 아닌 값의 범위에 포함되는 행들을 연결하는 방식
SELECT EMP_NAME,SALARY,E.SAL_LEVEL
FROM EMPLOYEE E
    JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);
    
--  셀프 조인 == 자체조인
-- 같은 테이블 조인(자기 자신과 조인)
-- ORACLE
SELECT E.EMP_ID, E.EMP_NAME 사원이름, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME 관리자이름
FROM EMPLOYEE E, EMPLOYEE M
WHERE M.EMP_ID = E.MANAGER_ID; -- 매니저 역할하는 테이블이 내가 담당하고 있는 사원 보는거고 사원 역할을 하는 테이블은 매니저를 본다

--ANSI
SELECT E.EMP_ID, E.EMP_NAME 사원이름, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME "관리자 이름"
FROM EMPLOYEE E
    JOIN EMPLOYEE M ON(E.MANAGER_ID = M.EMP_ID);

-- 다중 조인 : N개의 테이블을 조회할 때 사용
-- 다중 조인은 조인 순서 매우 중요!!!!!!!!!
-- 사번, 사원 명, 부서 코드, 부서 명, 지역 명(LOCAL_NAME) 조회
-- ORACLE 전용
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID 
        AND LOCATION_ID = LOCAL_CODE;
        
-- ANSI 
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCAL_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
    JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE);
    
-- 다중 조인 순서 올바르지않음 에러    
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCAL_NAME
FROM EMPLOYEE
    JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
    JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCAL_NAME
FROM DEPARTMENT
    JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
    JOIN EMPLOYEE ON(DEPT_CODE = DEPT_ID);
    
-- 직급이 대리이면서 아시아 지역에 근무하는 직원 조회
-- 사번, 이름, 직급명, 부서명, 근무지역명, 급여를 조회하세요
-- 오라클
SELECT EMP_ID,EMP_NAME,JOB_NAME,DEPT_TITLE,LOCAL_NAME,SALARY
FROM EMPLOYEE E ,JOB J ,DEPARTMENT D ,LOCATION L
WHERE E.JOB_CODE = J.JOB_CODE 
    AND LOCATION_ID = LOCAL_CODE 
    AND DEPT_CODE = DEPT_ID 
    AND JOB_NAME ='대리' 
    AND LOCAL_NAME LIKE 'ASIA%';
-- ANSI
SELECT EMP_ID,EMP_NAME,JOB_NAME, DEPT_TITLE,LOCAL_NAME,SALARY
FROM EMPLOYEE E
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
    JOIN LOCATION ON(LOCAL_CODE = LOCATION_ID)
WHERE LOCAL_NAME LIKE 'ASIA%' AND JOB_NAME ='대리';